@page "/"

@using FormulaOneConnect.Client.Components
@using System.Net.Http;
@using FormulaOneConnect.Client.Services.Interfaces;
@using FormulaOneConnect.Shared.Models;

<PageTitle>Home</PageTitle>

@if (loading)
{
    <div class="loader position-absolute top-50 start-50"></div>
}
else
{
    <section class="position-relative z-3 offset-md-2 col-md-8">
        <img src="/Login-Banner.png" class="w-100 banner">
    </section>
    <section class="my-3">
        <div class="row">
            <div class="offset-md-2 col-md-8">

                <div class="text-center mb-3">
                    <img src="/News-Header.png">
                </div>

                <div class="row">
                    @for (int i = 0; i < 3; i++)
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12">
                            <div class="card" @onclick="() => NavigateToArticle(topStories[i].Url)" style="cursor: pointer;">
                                <img class="card-img-top" src="@topStories[i].Image_url" alt="@topStories[i].Title">
                                <div class="card-body">
                                    <h4 class="card-title p-2">@topStories[i].Title</h4>
                                    <p class="card-text p-2">@topStories[i].Description</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
    <section class="my-3">
        <div class="row">
            <div class="offset-md-2 col-md-8">

                <div class="text-center mb-3">
                    <img src="/Standings-Header.png">
                </div>
                
                <div class="row">
                    @for (var i = 0; i < 10; i++)
                    {
                        <div class="standing-pill d-flex bg-white border border-1 rounded-pill mb-1 py-1 gap-4" style="height: fit-content;">
                            <p class="m-0 p-0">@currentDriverStandings[i].Position</p>
                            <p class="m-0 p-0">@currentDriverStandings[i].Driver.GivenName @currentDriverStandings[i].Driver.FamilyName</p>
                            <p class="m-0 p-0">@currentDriverStandings[i].Constructors[0].Name</p>
                            <p class="m-0 p-0 ms-auto">@currentDriverStandings[i].Points</p>
                            <p class="m-0 p-0">
                                <a href="@currentDriverStandings[i].Driver.Url" target="_blank">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right" viewBox="0 0 16 16">
                                        <path d="M6 12.796V3.204L11.481 8zm.659.753 5.48-4.796a1 1 0 0 0 0-1.506L6.66 2.451C6.011 1.885 5 2.345 5 3.204v9.592a1 1 0 0 0 1.659.753" />
                                    </svg>
                                </a>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="offset-md-2 col-md-8 position-relative">
            <div class="text-center mb-3">
                <img src="/Gaming-Header.png">
            </div>
            <img src="/Gaming.png" alt="Image 1" class="z-2 section_img pt-3 w-100 h-100 start-0">
            <div class="position-absolute top-50 start-50 translate-middle">
                <h3 class="d-block p-2 w-100">F1 Connect Gaming</h3>
                <button type="button" class="z-3 btn btn-primary btn-sm p-2 w-100">Browse All Gaming Leagues</button>
            </div>
        </div>
    </section>

    <Footer></Footer>
}

@code {
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private IStandingsService _standingsService { get; set; }
    [Inject] private INewsService _newsService { get; set; }

    private bool loading = true;
    public int standingsYear = DateTime.Now.Year;
    private List<FormulaOneConnect.Shared.Models.News> topStories = new();
    private List<Standings> standings = new();
    private List<DriverStanding> currentDriverStandings = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        var topStoryResult = await _newsService.GetTopStories();
        if (topStoryResult != null) topStories = topStoryResult.Data;

        var standingResult = await _standingsService.GetStandings(standingsYear);
        if (standingResult != null)
        {
            standings = standingResult.MRData?.StandingsTable?.StandingsLists;
            currentDriverStandings = standings.First(x => x.Season == standingsYear.ToString()).DriverStandings;
        }

        loading = false;
    }

    private void NavigateToArticle(string url)
    {
        _navigationManager.NavigateTo(url);
    }
}