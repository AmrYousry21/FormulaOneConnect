@page "/Standings"

@using FormulaOneConnect.Client.Services.Interfaces;
@using FormulaOneConnect.Shared.Models;
@using FormulaOneConnect.Client.Components;

<PageTitle>Standings</PageTitle>

@if (loading)
{
    <div class="loader position-absolute top-50 start-50"></div>
}
else
{
    <section class="my-3">
        <div class="row">
            <div class="offset-md-2 col-md-8 standings_table">

                <section class="my-3">
                    <div class="row">
                        <div class="text-center">
                            <button type="button" class="btn btn-outline-primary " data-toggle="button" aria-pressed="false" autocomplete="off" @onclick="() => OnClickStandings(StandingsType.Drivers)"
                                    disabled="@driversSelected">
                                Drivers
                            </button>
                            <button type="button" class="btn btn-outline-primary " data-toggle="button" aria-pressed="false" autocomplete="off" @onclick="() => OnClickStandings(StandingsType.Constructors)"
                                    disabled="@(!driversSelected)">
                                Constructors
                            </button>
                        </div>
                    </div>
                </section>
                @if (driversSelected)
                {
                    <DriversStandings standingsYear="@standingsYear" standings="@driverstandings" currentDriverStandings="@currentDriverStandings"></DriversStandings>
                }
                else
                {
                    <ConstructorsStandings standingsYear="@standingsYear" standings="@constructorstandings" currentConstuctorStandings="@currentConstuctorStandings"></ConstructorsStandings>
                }
            </div>
        </div>
    </section>
}

@code {

    [Inject] private IStandingsService _standingService { get; set; }

    private bool driversSelected = true;
    private bool loading;
    private int standingsYear = DateTime.Now.Year;
    private List<StandingsList> driverstandings = new();
    private List<StandingsList> constructorstandings = new();
    private List<DriverStanding> currentDriverStandings = new();
    private List<ConstructorStanding> currentConstuctorStandings = new();

    public enum StandingsType
    {
        Drivers,
        Constructors
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        var standingsResult = await _standingService.GetDriverStandings(standingsYear);

        if (standingsResult != null)
        {
            driverstandings = standingsResult.MRData.StandingsTable.StandingsLists;
            currentDriverStandings = driverstandings.SelectMany(x => x.DriverStandings).ToList();
        }


        loading = false;
    }

    private async Task OnClickStandings(StandingsType standingsType)
    {
        loading = true;
        
        switch (standingsType)
        {
            case StandingsType.Drivers:

                driversSelected = true;
                var DriverstandingsResult = await _standingService.GetDriverStandings(standingsYear);
                if (DriverstandingsResult != null)
                {
                    driverstandings = DriverstandingsResult.MRData.StandingsTable.StandingsLists;
                    currentDriverStandings = driverstandings.SelectMany(x => x.DriverStandings).ToList();
                }
                break;

            case StandingsType.Constructors:

                driversSelected = false;
                var ConstructorstandingsResult = await _standingService.GetConstructorsStandings(standingsYear);
                if (ConstructorstandingsResult != null)
                {
                    constructorstandings = ConstructorstandingsResult.MRData.StandingsTable.StandingsLists;
                    currentConstuctorStandings = constructorstandings.SelectMany(x => x.ConstructorStandings).ToList();
                }
                break;
        }

        loading = false;

        StateHasChanged();
    }
}
